// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.11.2
// source: pkg/types/core_types.proto

package types

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_types_core_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_types_core_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_pkg_types_core_types_proto_rawDescGZIP(), []int{0}
}

type ContainerId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ContainerId) Reset() {
	*x = ContainerId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_types_core_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerId) ProtoMessage() {}

func (x *ContainerId) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_types_core_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerId.ProtoReflect.Descriptor instead.
func (*ContainerId) Descriptor() ([]byte, []int) {
	return file_pkg_types_core_types_proto_rawDescGZIP(), []int{1}
}

func (x *ContainerId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ContainerBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Height uint32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Width  uint32 `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
}

func (x *ContainerBox) Reset() {
	*x = ContainerBox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_types_core_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerBox) ProtoMessage() {}

func (x *ContainerBox) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_types_core_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerBox.ProtoReflect.Descriptor instead.
func (*ContainerBox) Descriptor() ([]byte, []int) {
	return file_pkg_types_core_types_proto_rawDescGZIP(), []int{2}
}

func (x *ContainerBox) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ContainerBox) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ContainerBox) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

type ContainerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Backdrop `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	Tty    bool      `protobuf:"varint,2,opt,name=tty,proto3" json:"tty,omitempty"`
	Stdio  bool      `protobuf:"varint,3,opt,name=stdio,proto3" json:"stdio,omitempty"`
}

func (x *ContainerConfig) Reset() {
	*x = ContainerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_types_core_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerConfig) ProtoMessage() {}

func (x *ContainerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_types_core_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerConfig.ProtoReflect.Descriptor instead.
func (*ContainerConfig) Descriptor() ([]byte, []int) {
	return file_pkg_types_core_types_proto_rawDescGZIP(), []int{3}
}

func (x *ContainerConfig) GetConfig() *Backdrop {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ContainerConfig) GetTty() bool {
	if x != nil {
		return x.Tty
	}
	return false
}

func (x *ContainerConfig) GetStdio() bool {
	if x != nil {
		return x.Stdio
	}
	return false
}

type Backdrop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Aliases       []string       `protobuf:"bytes,2,rep,name=aliases,proto3" json:"aliases,omitempty"`
	ContainerName string         `protobuf:"bytes,3,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
	ImageId       string         `protobuf:"bytes,4,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	Entrypoint    *Entrypoint    `protobuf:"bytes,5,opt,name=entrypoint,proto3" json:"entrypoint,omitempty"`
	Environment   []*Environment `protobuf:"bytes,6,rep,name=environment,proto3" json:"environment,omitempty"`
	Volumes       []*Volume      `protobuf:"bytes,7,rep,name=volumes,proto3" json:"volumes,omitempty"`
	Devices       []*Device      `protobuf:"bytes,8,rep,name=devices,proto3" json:"devices,omitempty"`
	Ports         []*Port        `protobuf:"bytes,9,rep,name=ports,proto3" json:"ports,omitempty"`
	User          string         `protobuf:"bytes,10,opt,name=user,proto3" json:"user,omitempty"`
	WorkingDir    string         `protobuf:"bytes,11,opt,name=working_dir,json=workingDir,proto3" json:"working_dir,omitempty"`
}

func (x *Backdrop) Reset() {
	*x = Backdrop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_types_core_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backdrop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backdrop) ProtoMessage() {}

func (x *Backdrop) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_types_core_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backdrop.ProtoReflect.Descriptor instead.
func (*Backdrop) Descriptor() ([]byte, []int) {
	return file_pkg_types_core_types_proto_rawDescGZIP(), []int{4}
}

func (x *Backdrop) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Backdrop) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *Backdrop) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *Backdrop) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *Backdrop) GetEntrypoint() *Entrypoint {
	if x != nil {
		return x.Entrypoint
	}
	return nil
}

func (x *Backdrop) GetEnvironment() []*Environment {
	if x != nil {
		return x.Environment
	}
	return nil
}

func (x *Backdrop) GetVolumes() []*Volume {
	if x != nil {
		return x.Volumes
	}
	return nil
}

func (x *Backdrop) GetDevices() []*Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *Backdrop) GetPorts() []*Port {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *Backdrop) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Backdrop) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

type Entrypoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interactive bool     `protobuf:"varint,1,opt,name=interactive,proto3" json:"interactive,omitempty"`
	Script      string   `protobuf:"bytes,2,opt,name=script,proto3" json:"script,omitempty"`
	Interpreter []string `protobuf:"bytes,3,rep,name=interpreter,proto3" json:"interpreter,omitempty"`
	Arguments   []string `protobuf:"bytes,4,rep,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *Entrypoint) Reset() {
	*x = Entrypoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_types_core_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entrypoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entrypoint) ProtoMessage() {}

func (x *Entrypoint) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_types_core_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entrypoint.ProtoReflect.Descriptor instead.
func (*Entrypoint) Descriptor() ([]byte, []int) {
	return file_pkg_types_core_types_proto_rawDescGZIP(), []int{5}
}

func (x *Entrypoint) GetInteractive() bool {
	if x != nil {
		return x.Interactive
	}
	return false
}

func (x *Entrypoint) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

func (x *Entrypoint) GetInterpreter() []string {
	if x != nil {
		return x.Interpreter
	}
	return nil
}

func (x *Entrypoint) GetArguments() []string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type Environment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Environment) Reset() {
	*x = Environment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_types_core_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Environment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Environment) ProtoMessage() {}

func (x *Environment) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_types_core_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Environment.ProtoReflect.Descriptor instead.
func (*Environment) Descriptor() ([]byte, []int) {
	return file_pkg_types_core_types_proto_rawDescGZIP(), []int{6}
}

func (x *Environment) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Environment) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Volume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source   string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Target   string `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	Readonly bool   `protobuf:"varint,3,opt,name=readonly,proto3" json:"readonly,omitempty"`
}

func (x *Volume) Reset() {
	*x = Volume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_types_core_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume) ProtoMessage() {}

func (x *Volume) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_types_core_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume.ProtoReflect.Descriptor instead.
func (*Volume) Descriptor() ([]byte, []int) {
	return file_pkg_types_core_types_proto_rawDescGZIP(), []int{7}
}

func (x *Volume) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Volume) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *Volume) GetReadonly() bool {
	if x != nil {
		return x.Readonly
	}
	return false
}

type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CgroupRule  string `protobuf:"bytes,1,opt,name=cgroup_rule,json=cgroupRule,proto3" json:"cgroup_rule,omitempty"`
	Source      string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Target      string `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Permissions string `protobuf:"bytes,4,opt,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_types_core_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_types_core_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_pkg_types_core_types_proto_rawDescGZIP(), []int{8}
}

func (x *Device) GetCgroupRule() string {
	if x != nil {
		return x.CgroupRule
	}
	return ""
}

func (x *Device) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Device) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *Device) GetPermissions() string {
	if x != nil {
		return x.Permissions
	}
	return ""
}

type Port struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target    string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Published string `protobuf:"bytes,2,opt,name=published,proto3" json:"published,omitempty"`
	Protocol  string `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	HostIp    string `protobuf:"bytes,4,opt,name=host_ip,json=hostIp,proto3" json:"host_ip,omitempty"`
}

func (x *Port) Reset() {
	*x = Port{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_types_core_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Port) ProtoMessage() {}

func (x *Port) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_types_core_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Port.ProtoReflect.Descriptor instead.
func (*Port) Descriptor() ([]byte, []int) {
	return file_pkg_types_core_types_proto_rawDescGZIP(), []int{9}
}

func (x *Port) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *Port) GetPublished() string {
	if x != nil {
		return x.Published
	}
	return ""
}

func (x *Port) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *Port) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_types_core_types_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_types_core_types_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_pkg_types_core_types_proto_rawDescGZIP(), []int{10}
}

func (x *Image) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Image) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExitCode int64  `protobuf:"varint,1,opt,name=exitCode,proto3" json:"exitCode,omitempty"`
	Message  string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_types_core_types_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_types_core_types_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_pkg_types_core_types_proto_rawDescGZIP(), []int{11}
}

func (x *Result) GetExitCode() int64 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *Result) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type StreamingConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *StreamingConnection) Reset() {
	*x = StreamingConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_types_core_types_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingConnection) ProtoMessage() {}

func (x *StreamingConnection) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_types_core_types_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingConnection.ProtoReflect.Descriptor instead.
func (*StreamingConnection) Descriptor() ([]byte, []int) {
	return file_pkg_types_core_types_proto_rawDescGZIP(), []int{12}
}

func (x *StreamingConnection) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

var File_pkg_types_core_types_proto protoreflect.FileDescriptor

var file_pkg_types_core_types_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x73,
	0x65, 0x6e, 0x2e, 0x64, 0x6f, 0x64, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x07, 0x0a,
	0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1d, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4c, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x42, 0x6f, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x22, 0x7c, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x41, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x6f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x73, 0x65, 0x6e, 0x2e, 0x64, 0x6f,
	0x64, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x64, 0x72, 0x6f,
	0x70, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x74, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x64, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x64, 0x69,
	0x6f, 0x22, 0x8f, 0x04, 0x0a, 0x08, 0x42, 0x61, 0x63, 0x6b, 0x64, 0x72, 0x6f, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x4b,
	0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x6f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x73, 0x65, 0x6e, 0x2e, 0x64, 0x6f, 0x64, 0x6f, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x0b, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6f, 0x63,
	0x6c, 0x61, 0x75, 0x73, 0x73, 0x65, 0x6e, 0x2e, 0x64, 0x6f, 0x64, 0x6f, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x07, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6f, 0x63, 0x6c, 0x61, 0x75, 0x73,
	0x73, 0x65, 0x6e, 0x2e, 0x64, 0x6f, 0x64, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x41,
	0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6f, 0x63, 0x6c,
	0x61, 0x75, 0x73, 0x73, 0x65, 0x6e, 0x2e, 0x64, 0x6f, 0x64, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6f, 0x63,
	0x6c, 0x61, 0x75, 0x73, 0x73, 0x65, 0x6e, 0x2e, 0x64, 0x6f, 0x64, 0x6f, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69,
	0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x44, 0x69, 0x72, 0x22, 0x86, 0x01, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x35, 0x0a, 0x0b,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x54, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x22, 0x7b, 0x0a, 0x06, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x71, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x22, 0x2b, 0x0a, 0x05, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3e, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x27, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x32,
	0xb7, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x56, 0x0a, 0x04, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x73, 0x65, 0x6e,
	0x2e, 0x64, 0x6f, 0x64, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6f,
	0x63, 0x6c, 0x61, 0x75, 0x73, 0x73, 0x65, 0x6e, 0x2e, 0x64, 0x6f, 0x64, 0x6f, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x6b, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6f, 0x63,
	0x6c, 0x61, 0x75, 0x73, 0x73, 0x65, 0x6e, 0x2e, 0x64, 0x6f, 0x64, 0x6f, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x64, 0x72, 0x6f, 0x70, 0x1a, 0x29, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x73,
	0x65, 0x6e, 0x2e, 0x64, 0x6f, 0x64, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x61,
	0x63, 0x6b, 0x64, 0x72, 0x6f, 0x70, 0x12, 0x61, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x6f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x73, 0x65, 0x6e, 0x2e, 0x64, 0x6f, 0x64, 0x6f, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6f,
	0x63, 0x6c, 0x61, 0x75, 0x73, 0x73, 0x65, 0x6e, 0x2e, 0x64, 0x6f, 0x64, 0x6f, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xe2, 0x06, 0x0a, 0x10, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x56,
	0x0a, 0x04, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x6f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x73, 0x65, 0x6e, 0x2e, 0x64, 0x6f,
	0x64, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6f, 0x63, 0x6c, 0x61,
	0x75, 0x73, 0x73, 0x65, 0x6e, 0x2e, 0x64, 0x6f, 0x64, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x5e, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x6f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x73, 0x65, 0x6e, 0x2e, 0x64, 0x6f,
	0x64, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x1a, 0x26,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6f, 0x63, 0x6c, 0x61,
	0x75, 0x73, 0x73, 0x65, 0x6e, 0x2e, 0x64, 0x6f, 0x64, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x71, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x73, 0x65, 0x6e,
	0x2e, 0x64, 0x6f, 0x64, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x2c, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x73,
	0x65, 0x6e, 0x2e, 0x64, 0x6f, 0x64, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x66, 0x0a, 0x0e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x2c, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x73,
	0x65, 0x6e, 0x2e, 0x64, 0x6f, 0x64, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x73, 0x65, 0x6e,
	0x2e, 0x64, 0x6f, 0x64, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x67, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x6f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x73, 0x65, 0x6e, 0x2e, 0x64, 0x6f, 0x64, 0x6f,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x6f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x73, 0x65, 0x6e, 0x2e, 0x64, 0x6f, 0x64, 0x6f, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x68, 0x0a, 0x0f, 0x52, 0x65,
	0x73, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x2d, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6f, 0x63, 0x6c, 0x61, 0x75,
	0x73, 0x73, 0x65, 0x6e, 0x2e, 0x64, 0x6f, 0x64, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x6f, 0x78, 0x1a, 0x26, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6f, 0x63, 0x6c, 0x61, 0x75, 0x73,
	0x73, 0x65, 0x6e, 0x2e, 0x64, 0x6f, 0x64, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x7e, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x75, 0x70, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6f, 0x63,
	0x6c, 0x61, 0x75, 0x73, 0x73, 0x65, 0x6e, 0x2e, 0x64, 0x6f, 0x64, 0x6f, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x34,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6f, 0x63, 0x6c, 0x61,
	0x75, 0x73, 0x73, 0x65, 0x6e, 0x2e, 0x64, 0x6f, 0x64, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x6f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x73, 0x65, 0x6e, 0x2e, 0x64,
	0x6f, 0x64, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x6f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x73, 0x65, 0x6e, 0x2e, 0x64, 0x6f, 0x64,
	0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x25,
	0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x63, 0x6c,
	0x61, 0x75, 0x73, 0x73, 0x65, 0x6e, 0x2f, 0x64, 0x6f, 0x64, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_types_core_types_proto_rawDescOnce sync.Once
	file_pkg_types_core_types_proto_rawDescData = file_pkg_types_core_types_proto_rawDesc
)

func file_pkg_types_core_types_proto_rawDescGZIP() []byte {
	file_pkg_types_core_types_proto_rawDescOnce.Do(func() {
		file_pkg_types_core_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_types_core_types_proto_rawDescData)
	})
	return file_pkg_types_core_types_proto_rawDescData
}

var file_pkg_types_core_types_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_pkg_types_core_types_proto_goTypes = []interface{}{
	(*Empty)(nil),               // 0: com.github.oclaussen.dodo.types.Empty
	(*ContainerId)(nil),         // 1: com.github.oclaussen.dodo.types.ContainerId
	(*ContainerBox)(nil),        // 2: com.github.oclaussen.dodo.types.ContainerBox
	(*ContainerConfig)(nil),     // 3: com.github.oclaussen.dodo.types.ContainerConfig
	(*Backdrop)(nil),            // 4: com.github.oclaussen.dodo.types.Backdrop
	(*Entrypoint)(nil),          // 5: com.github.oclaussen.dodo.types.Entrypoint
	(*Environment)(nil),         // 6: com.github.oclaussen.dodo.types.Environment
	(*Volume)(nil),              // 7: com.github.oclaussen.dodo.types.Volume
	(*Device)(nil),              // 8: com.github.oclaussen.dodo.types.Device
	(*Port)(nil),                // 9: com.github.oclaussen.dodo.types.Port
	(*Image)(nil),               // 10: com.github.oclaussen.dodo.types.Image
	(*Result)(nil),              // 11: com.github.oclaussen.dodo.types.Result
	(*StreamingConnection)(nil), // 12: com.github.oclaussen.dodo.types.StreamingConnection
}
var file_pkg_types_core_types_proto_depIdxs = []int32{
	4,  // 0: com.github.oclaussen.dodo.types.ContainerConfig.config:type_name -> com.github.oclaussen.dodo.types.Backdrop
	5,  // 1: com.github.oclaussen.dodo.types.Backdrop.entrypoint:type_name -> com.github.oclaussen.dodo.types.Entrypoint
	6,  // 2: com.github.oclaussen.dodo.types.Backdrop.environment:type_name -> com.github.oclaussen.dodo.types.Environment
	7,  // 3: com.github.oclaussen.dodo.types.Backdrop.volumes:type_name -> com.github.oclaussen.dodo.types.Volume
	8,  // 4: com.github.oclaussen.dodo.types.Backdrop.devices:type_name -> com.github.oclaussen.dodo.types.Device
	9,  // 5: com.github.oclaussen.dodo.types.Backdrop.ports:type_name -> com.github.oclaussen.dodo.types.Port
	0,  // 6: com.github.oclaussen.dodo.types.Configuration.Init:input_type -> com.github.oclaussen.dodo.types.Empty
	4,  // 7: com.github.oclaussen.dodo.types.Configuration.UpdateConfiguration:input_type -> com.github.oclaussen.dodo.types.Backdrop
	1,  // 8: com.github.oclaussen.dodo.types.Configuration.Provision:input_type -> com.github.oclaussen.dodo.types.ContainerId
	0,  // 9: com.github.oclaussen.dodo.types.ContainerRuntime.Init:input_type -> com.github.oclaussen.dodo.types.Empty
	10, // 10: com.github.oclaussen.dodo.types.ContainerRuntime.ResolveImage:input_type -> com.github.oclaussen.dodo.types.Image
	3,  // 11: com.github.oclaussen.dodo.types.ContainerRuntime.CreateContainer:input_type -> com.github.oclaussen.dodo.types.ContainerConfig
	1,  // 12: com.github.oclaussen.dodo.types.ContainerRuntime.StartContainer:input_type -> com.github.oclaussen.dodo.types.ContainerId
	1,  // 13: com.github.oclaussen.dodo.types.ContainerRuntime.RemoveContainer:input_type -> com.github.oclaussen.dodo.types.ContainerId
	2,  // 14: com.github.oclaussen.dodo.types.ContainerRuntime.ResizeContainer:input_type -> com.github.oclaussen.dodo.types.ContainerBox
	1,  // 15: com.github.oclaussen.dodo.types.ContainerRuntime.SetupStreamingConnection:input_type -> com.github.oclaussen.dodo.types.ContainerId
	1,  // 16: com.github.oclaussen.dodo.types.ContainerRuntime.StreamContainer:input_type -> com.github.oclaussen.dodo.types.ContainerId
	0,  // 17: com.github.oclaussen.dodo.types.Configuration.Init:output_type -> com.github.oclaussen.dodo.types.Empty
	4,  // 18: com.github.oclaussen.dodo.types.Configuration.UpdateConfiguration:output_type -> com.github.oclaussen.dodo.types.Backdrop
	0,  // 19: com.github.oclaussen.dodo.types.Configuration.Provision:output_type -> com.github.oclaussen.dodo.types.Empty
	0,  // 20: com.github.oclaussen.dodo.types.ContainerRuntime.Init:output_type -> com.github.oclaussen.dodo.types.Empty
	10, // 21: com.github.oclaussen.dodo.types.ContainerRuntime.ResolveImage:output_type -> com.github.oclaussen.dodo.types.Image
	1,  // 22: com.github.oclaussen.dodo.types.ContainerRuntime.CreateContainer:output_type -> com.github.oclaussen.dodo.types.ContainerId
	0,  // 23: com.github.oclaussen.dodo.types.ContainerRuntime.StartContainer:output_type -> com.github.oclaussen.dodo.types.Empty
	0,  // 24: com.github.oclaussen.dodo.types.ContainerRuntime.RemoveContainer:output_type -> com.github.oclaussen.dodo.types.Empty
	0,  // 25: com.github.oclaussen.dodo.types.ContainerRuntime.ResizeContainer:output_type -> com.github.oclaussen.dodo.types.Empty
	12, // 26: com.github.oclaussen.dodo.types.ContainerRuntime.SetupStreamingConnection:output_type -> com.github.oclaussen.dodo.types.StreamingConnection
	11, // 27: com.github.oclaussen.dodo.types.ContainerRuntime.StreamContainer:output_type -> com.github.oclaussen.dodo.types.Result
	17, // [17:28] is the sub-list for method output_type
	6,  // [6:17] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_pkg_types_core_types_proto_init() }
func file_pkg_types_core_types_proto_init() {
	if File_pkg_types_core_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_types_core_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_types_core_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_types_core_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerBox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_types_core_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_types_core_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backdrop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_types_core_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entrypoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_types_core_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Environment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_types_core_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_types_core_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_types_core_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Port); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_types_core_types_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_types_core_types_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_types_core_types_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_types_core_types_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_pkg_types_core_types_proto_goTypes,
		DependencyIndexes: file_pkg_types_core_types_proto_depIdxs,
		MessageInfos:      file_pkg_types_core_types_proto_msgTypes,
	}.Build()
	File_pkg_types_core_types_proto = out.File
	file_pkg_types_core_types_proto_rawDesc = nil
	file_pkg_types_core_types_proto_goTypes = nil
	file_pkg_types_core_types_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ConfigurationClient is the client API for Configuration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConfigurationClient interface {
	Init(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	UpdateConfiguration(ctx context.Context, in *Backdrop, opts ...grpc.CallOption) (*Backdrop, error)
	Provision(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*Empty, error)
}

type configurationClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigurationClient(cc grpc.ClientConnInterface) ConfigurationClient {
	return &configurationClient{cc}
}

func (c *configurationClient) Init(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/com.github.oclaussen.dodo.types.Configuration/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationClient) UpdateConfiguration(ctx context.Context, in *Backdrop, opts ...grpc.CallOption) (*Backdrop, error) {
	out := new(Backdrop)
	err := c.cc.Invoke(ctx, "/com.github.oclaussen.dodo.types.Configuration/UpdateConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationClient) Provision(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/com.github.oclaussen.dodo.types.Configuration/Provision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigurationServer is the server API for Configuration service.
type ConfigurationServer interface {
	Init(context.Context, *Empty) (*Empty, error)
	UpdateConfiguration(context.Context, *Backdrop) (*Backdrop, error)
	Provision(context.Context, *ContainerId) (*Empty, error)
}

// UnimplementedConfigurationServer can be embedded to have forward compatible implementations.
type UnimplementedConfigurationServer struct {
}

func (*UnimplementedConfigurationServer) Init(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (*UnimplementedConfigurationServer) UpdateConfiguration(context.Context, *Backdrop) (*Backdrop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfiguration not implemented")
}
func (*UnimplementedConfigurationServer) Provision(context.Context, *ContainerId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Provision not implemented")
}

func RegisterConfigurationServer(s *grpc.Server, srv ConfigurationServer) {
	s.RegisterService(&_Configuration_serviceDesc, srv)
}

func _Configuration_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.github.oclaussen.dodo.types.Configuration/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).Init(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Configuration_UpdateConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Backdrop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).UpdateConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.github.oclaussen.dodo.types.Configuration/UpdateConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).UpdateConfiguration(ctx, req.(*Backdrop))
	}
	return interceptor(ctx, in, info, handler)
}

func _Configuration_Provision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).Provision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.github.oclaussen.dodo.types.Configuration/Provision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).Provision(ctx, req.(*ContainerId))
	}
	return interceptor(ctx, in, info, handler)
}

var _Configuration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.github.oclaussen.dodo.types.Configuration",
	HandlerType: (*ConfigurationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _Configuration_Init_Handler,
		},
		{
			MethodName: "UpdateConfiguration",
			Handler:    _Configuration_UpdateConfiguration_Handler,
		},
		{
			MethodName: "Provision",
			Handler:    _Configuration_Provision_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/types/core_types.proto",
}

// ContainerRuntimeClient is the client API for ContainerRuntime service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ContainerRuntimeClient interface {
	Init(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	ResolveImage(ctx context.Context, in *Image, opts ...grpc.CallOption) (*Image, error)
	CreateContainer(ctx context.Context, in *ContainerConfig, opts ...grpc.CallOption) (*ContainerId, error)
	StartContainer(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*Empty, error)
	RemoveContainer(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*Empty, error)
	ResizeContainer(ctx context.Context, in *ContainerBox, opts ...grpc.CallOption) (*Empty, error)
	SetupStreamingConnection(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*StreamingConnection, error)
	StreamContainer(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*Result, error)
}

type containerRuntimeClient struct {
	cc grpc.ClientConnInterface
}

func NewContainerRuntimeClient(cc grpc.ClientConnInterface) ContainerRuntimeClient {
	return &containerRuntimeClient{cc}
}

func (c *containerRuntimeClient) Init(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/com.github.oclaussen.dodo.types.ContainerRuntime/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerRuntimeClient) ResolveImage(ctx context.Context, in *Image, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, "/com.github.oclaussen.dodo.types.ContainerRuntime/ResolveImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerRuntimeClient) CreateContainer(ctx context.Context, in *ContainerConfig, opts ...grpc.CallOption) (*ContainerId, error) {
	out := new(ContainerId)
	err := c.cc.Invoke(ctx, "/com.github.oclaussen.dodo.types.ContainerRuntime/CreateContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerRuntimeClient) StartContainer(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/com.github.oclaussen.dodo.types.ContainerRuntime/StartContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerRuntimeClient) RemoveContainer(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/com.github.oclaussen.dodo.types.ContainerRuntime/RemoveContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerRuntimeClient) ResizeContainer(ctx context.Context, in *ContainerBox, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/com.github.oclaussen.dodo.types.ContainerRuntime/ResizeContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerRuntimeClient) SetupStreamingConnection(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*StreamingConnection, error) {
	out := new(StreamingConnection)
	err := c.cc.Invoke(ctx, "/com.github.oclaussen.dodo.types.ContainerRuntime/SetupStreamingConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerRuntimeClient) StreamContainer(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/com.github.oclaussen.dodo.types.ContainerRuntime/StreamContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContainerRuntimeServer is the server API for ContainerRuntime service.
type ContainerRuntimeServer interface {
	Init(context.Context, *Empty) (*Empty, error)
	ResolveImage(context.Context, *Image) (*Image, error)
	CreateContainer(context.Context, *ContainerConfig) (*ContainerId, error)
	StartContainer(context.Context, *ContainerId) (*Empty, error)
	RemoveContainer(context.Context, *ContainerId) (*Empty, error)
	ResizeContainer(context.Context, *ContainerBox) (*Empty, error)
	SetupStreamingConnection(context.Context, *ContainerId) (*StreamingConnection, error)
	StreamContainer(context.Context, *ContainerId) (*Result, error)
}

// UnimplementedContainerRuntimeServer can be embedded to have forward compatible implementations.
type UnimplementedContainerRuntimeServer struct {
}

func (*UnimplementedContainerRuntimeServer) Init(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (*UnimplementedContainerRuntimeServer) ResolveImage(context.Context, *Image) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveImage not implemented")
}
func (*UnimplementedContainerRuntimeServer) CreateContainer(context.Context, *ContainerConfig) (*ContainerId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContainer not implemented")
}
func (*UnimplementedContainerRuntimeServer) StartContainer(context.Context, *ContainerId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartContainer not implemented")
}
func (*UnimplementedContainerRuntimeServer) RemoveContainer(context.Context, *ContainerId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveContainer not implemented")
}
func (*UnimplementedContainerRuntimeServer) ResizeContainer(context.Context, *ContainerBox) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResizeContainer not implemented")
}
func (*UnimplementedContainerRuntimeServer) SetupStreamingConnection(context.Context, *ContainerId) (*StreamingConnection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupStreamingConnection not implemented")
}
func (*UnimplementedContainerRuntimeServer) StreamContainer(context.Context, *ContainerId) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamContainer not implemented")
}

func RegisterContainerRuntimeServer(s *grpc.Server, srv ContainerRuntimeServer) {
	s.RegisterService(&_ContainerRuntime_serviceDesc, srv)
}

func _ContainerRuntime_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerRuntimeServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.github.oclaussen.dodo.types.ContainerRuntime/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerRuntimeServer).Init(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerRuntime_ResolveImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Image)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerRuntimeServer).ResolveImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.github.oclaussen.dodo.types.ContainerRuntime/ResolveImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerRuntimeServer).ResolveImage(ctx, req.(*Image))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerRuntime_CreateContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerRuntimeServer).CreateContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.github.oclaussen.dodo.types.ContainerRuntime/CreateContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerRuntimeServer).CreateContainer(ctx, req.(*ContainerConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerRuntime_StartContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerRuntimeServer).StartContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.github.oclaussen.dodo.types.ContainerRuntime/StartContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerRuntimeServer).StartContainer(ctx, req.(*ContainerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerRuntime_RemoveContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerRuntimeServer).RemoveContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.github.oclaussen.dodo.types.ContainerRuntime/RemoveContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerRuntimeServer).RemoveContainer(ctx, req.(*ContainerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerRuntime_ResizeContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerBox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerRuntimeServer).ResizeContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.github.oclaussen.dodo.types.ContainerRuntime/ResizeContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerRuntimeServer).ResizeContainer(ctx, req.(*ContainerBox))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerRuntime_SetupStreamingConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerRuntimeServer).SetupStreamingConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.github.oclaussen.dodo.types.ContainerRuntime/SetupStreamingConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerRuntimeServer).SetupStreamingConnection(ctx, req.(*ContainerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerRuntime_StreamContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerRuntimeServer).StreamContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.github.oclaussen.dodo.types.ContainerRuntime/StreamContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerRuntimeServer).StreamContainer(ctx, req.(*ContainerId))
	}
	return interceptor(ctx, in, info, handler)
}

var _ContainerRuntime_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.github.oclaussen.dodo.types.ContainerRuntime",
	HandlerType: (*ContainerRuntimeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _ContainerRuntime_Init_Handler,
		},
		{
			MethodName: "ResolveImage",
			Handler:    _ContainerRuntime_ResolveImage_Handler,
		},
		{
			MethodName: "CreateContainer",
			Handler:    _ContainerRuntime_CreateContainer_Handler,
		},
		{
			MethodName: "StartContainer",
			Handler:    _ContainerRuntime_StartContainer_Handler,
		},
		{
			MethodName: "RemoveContainer",
			Handler:    _ContainerRuntime_RemoveContainer_Handler,
		},
		{
			MethodName: "ResizeContainer",
			Handler:    _ContainerRuntime_ResizeContainer_Handler,
		},
		{
			MethodName: "SetupStreamingConnection",
			Handler:    _ContainerRuntime_SetupStreamingConnection_Handler,
		},
		{
			MethodName: "StreamContainer",
			Handler:    _ContainerRuntime_StreamContainer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/types/core_types.proto",
}
