syntax = "proto3";
package types;

message Empty {}

message ContainerId {
  string id = 1;
}

message ContainerBox {
  string id = 1;
  uint32 height = 2;
  uint32 width = 3;
}

message ContainerConfig {
  Backdrop config = 1;
  bool tty = 2;
  bool stdio = 3;
}

message Backdrop {
  string name = 1;
  repeated string aliases = 2;
  string container_name = 3;

  string image_id = 4;
  Entrypoint entrypoint = 5;

  repeated Environment environment = 6;
  repeated Volume volumes = 7;
  repeated Device devices = 8;
  repeated Port ports = 9;

  string user = 10;
  string working_dir = 11;
}

message Entrypoint {
  bool interactive = 1;
  string script = 2;
  repeated string interpreter = 3;
  repeated string arguments = 4;
}

message Environment {
  string key = 1;
  string value = 2;
}

message Volume {
  string source = 1;
  string target = 2;
  bool readonly = 3;
}

message Device {
  string cgroup_rule = 1;
  string source = 2;
  string target = 3;
  string permissions = 4;
}

message Port {
  string target = 1;
  string published = 2;
  string protocol = 3;
  string host_ip = 4;
}

message Image {
  string name = 1;
  string id = 2;
}

message Result {
  int64 exitCode = 1;
  string message = 2;
}

message StreamingConnection {
  string url = 1;
}

service Configuration {
  rpc Init(Empty) returns (Empty);
  rpc UpdateConfiguration(Backdrop) returns (Backdrop);
  rpc Provision(ContainerId) returns (Empty);
}

service ContainerRuntime {
  rpc Init(Empty) returns (Empty);
  rpc ResolveImage(Image) returns (Image);
  rpc CreateContainer(ContainerConfig) returns (ContainerId);
  rpc StartContainer(ContainerId) returns (Empty);
  rpc RemoveContainer(ContainerId) returns (Empty);
  rpc ResizeContainer(ContainerBox) returns (Empty);
  rpc SetupStreamingConnection(ContainerId) returns (StreamingConnection);
  rpc StreamContainer(ContainerId) returns (Result);
}
